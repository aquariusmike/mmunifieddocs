<!--
<template>
  <div class="w-full h-screen flex flex-col justify-center items-center gap-4">
    <!-- Search Bar -->
    <div class="w-3/4 flex items-center mb-4">
      <input 
        v-model="searchQuery" 
        type="text" 
        placeholder="Search documents..." 
        class="w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
        @input="handleSearch"
      />
    </div>
    
    <div class="w-3/4 h-1/2 bg-slate-600 rounded-md p-6 overflow-y-auto">
      <h1 class="text-xl font-bold text-white mb-4">{{ searchQuery ? 'Search Results' : 'Documents' }}</h1>
      
      <ul v-if="filteredData && filteredData.length" class="space-y-4">
        <li v-for="item in filteredData" :key="item.path" class="bg-slate-700 p-4 rounded-md">
          <NuxtLink :to="item.path" class="text-blue-300 hover:text-blue-100 font-medium">
            {{ item.title }}
          </NuxtLink>
          <p class="text-gray-300 mt-1" v-if="item.description">
            {{ item.description.length > 100 ? item.description.slice(0, 100) + '...' : item.description }}
          </p>
        </li>
      </ul>
      
      <p v-else-if="searchQuery" class="text-white">No results found for "{{ searchQuery }}"</p>
      <p v-else class="text-white">No documents available</p>
    </div>
  </div>
</template>
!-->

//<script setup>
const route = useRoute()
const searchQuery = ref('')
const filteredData = ref([])

const { data } = await useAsyncData(route.path, () => {
  return queryCollection('docs')
    .select('path', 'title', 'description')
    .limit(10)
    .all()
})

const { data: sections  } = await useAsyncData('search-sections', () => {
  return queryCollectionSearchSections('docs', {
    ignoredTags: ['code']
  })
   .select('path', 'title', 'description', 'body', 'content')
    .limit(10)
    .all()
})

// Set initial filtered data to all data
watch(data, (newData) => {
  if (newData) {
    filteredData.value = newData
  }
}, { immediate: true })

// Handle search input
const handleSearch = () => {
  if (!data.value) return
  
  if (!searchQuery.value.trim()) {
    // If search is empty, show all results
    filteredData.value = data.value
    return
  }
  
  // Filter data based on search query
  const query = searchQuery.value.toLowerCase()
  filteredData.value = data.value.filter(item => {
    return (
      item.title?.toLowerCase().includes(query) || 
      item.description?.toLowerCase().includes(query)
    )
  })
}
</script>
//